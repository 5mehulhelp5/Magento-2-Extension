<?php

namespace Unbxd\ProductFeed\Model\Indexer\Product\Full\DataSourceProvider;

/**
 * @author      Jag S <jagadeesh@oceaniasolution.com>
 */

use Unbxd\ProductFeed\Model\Indexer\Product\Full\DataSourceProviderInterface;
use Unbxd\ProductFeed\Logger\LoggerInterface;
use Magento\Catalog\Helper\Product;
use Unbxd\ProductFeed\Helper\Data as HelperData;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\Store\Model\ScopeInterface;
use Magento\CatalogUrlRewrite\Model\ProductUrlRewriteGenerator;
use \Exception;

class ProductUrlRewriteLinkProvider implements DataSourceProviderInterface
{
    /**
     * Related data source code
     */
    const DATA_SOURCE_CODE = 'producturl_rewrite';


    /** Define the schema for the attribute */

     /**
     * @var LoggerInterface
     */
    private $logger;

     /**
     * @var HelperData
     */
    private $helperData;


     /**
     * @var UrlFinderInterface
     */
    protected $urlFinder;

   
    /**
     * Constructor.
     */
    public function __construct(UrlFinderInterface $urlFinder,LoggerInterface $logger, HelperData $helperData) {
        $this->urlFinder = $urlFinder;
        $this->logger = $logger->create("feed");
        $this->helperData = $helperData;

    }

    /**
     * {@inheritdoc}
     */
    public function getDataSourceCode()
    {
        return self::DATA_SOURCE_CODE;
    }

    /**
     * Add custom code here
     *
     * {@inheritdoc}
     */
    public function appendData($storeId, array $indexData)
    {
        /* product ID is the entity id in magento , add your custom logic for your custom attribute */
        foreach (array_keys($indexData) as $productId) {
            try {
                if ($productId != "fields"){
                    $filterData = [
                        UrlRewrite::ENTITY_ID => $productId,
                        UrlRewrite::ENTITY_TYPE => ProductUrlRewriteGenerator::ENTITY_TYPE,
                        UrlRewrite::STORE_ID => $storeId,
                    ];
                    $rewrites = $this->urlFinder->findAllByData($filterData);
                    $useCategories = $this->helperData->getConfigValue(Product::XML_PATH_PRODUCT_URL_USE_CATEGORY, ScopeInterface::SCOPE_STORE,$storeId);
                    if ($rewrites && count($rewrites) > 0) {
                        usort($rewrites, function ($a, $b) use ($useCategories) {
                            $b_autogenerate = $b->getIsAutogenerated();
                            $a_autogenerate = $a->getIsAutogenerated();
                            $b_rewriteType = $b->getRedirectType();
                            $a_rewriteType = $a->getRedirectType();
                            $a_isCategory = ($a->getTargetPath() && $useCategories) ? str_contains($a->getTargetPath(), 'category') : 0;
                            $b_isCategory = ($b->getTargetPath() && $useCategories) ? str_contains($b->getTargetPath(), 'category') : 0;
                            if (($b_rewriteType == '301' || $b_autogenerate == 0 || ($b_isCategory && !$a_isCategory))) {
                                return 1;
                            } else if (($a_rewriteType == '301' || $a_autogenerate == 0 || ($a_isCategory && !$b_isCategory))) {
                                return -1;
                            }
                            return 0;
                        });
                        $indexData[$productId]["productLink"] = $rewrites[0]->getRequestPath();
                    }
                }
            } catch (\Exception $e) {
                $this->logger->error('Error while fetching image url for product -'.$productId. $e->__toString());
            }
        }
        /** 
         * Replace the second argument with that of the attribute name which was included in line 75
         * addIndexedFields accepts a third optional argument which should one of the following values ('text','longText','decimal','number','link','date','bool','sku','path')
         * */
        $this->addIndexedFields($indexData,"productLink");
        return $indexData;
    }



    /**
     * @param $indexData
     * @return 
     */
    private function addIndexedFields(array &$indexData,$attrName,$fieldType = "link")
    {
        $alreadyExistFields = array_key_exists('fields', $indexData) ? $indexData['fields'] : [];
        $indexData['fields'] = array_merge($alreadyExistFields, [$attrName => [
            'fieldName' => $attrName,
            'dataType' => $fieldType,
            'multiValued' => false, /*set it to true if the attribute will carry more than one value for the same product */
            'autoSuggest' => false
]]);
    }
}
